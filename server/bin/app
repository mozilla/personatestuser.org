#!/usr/bin/env node
/* -*- Mode: js2; js2-basic-offset: 2; indent-tabs-mode: nil; -*- */

/**
 * persona test user generator
 *
 * see README.md for documentation
 */

const express = require('express'),
      path = require('path'),
      socket_io = require('socket.io'),
      vconf = require('../lib/vconf'),
      logEvent = require("../lib/events").logEvent,
      fetchEvents = require('../lib/events').fetchEvents,
      API = require('../lib/api');

var api = new API();
var app = module.exports = express.createServer();

const allowedEnvs = Object.keys(vconf);

var io = socket_io.listen(app);
io.set('log level', 1);

// Configuration

app.configure(function(){
  app.set('views', path.join(__dirname, '..', 'views'));
  app.set('view engine', 'jade');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(path.join(__dirname, '..', '..', 'static')));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// middleware

function verifyEnv(req, res, next) {
  var serverEnv = req.param('env', 'prod');
  if (allowedEnvs.indexOf(serverEnv) === -1) {
    res.writeHead(400);
    return res.end("env must be one of " + allowedEnvs.join(', '));
  } else {
    // XXX apparently this assignment doens't work
    req.param['env'] = serverEnv;
    next();
  }
}

// Routes

app.get('/', function(req, res) {
  res.render('index');
});

function dataWithEvents(res, data, start) {
  logEvent("Done", data.email);
  fetchEvents(data.email, start, function(err, stream) {
    data['events'] = {
      'start': start,
      'stream': stream
    };
    return res.end(JSON.stringify(data));
  });
}

app.get('/email/:env?', verifyEnv, function getVerifiedEmail(req, res) {
  var start = Date.now();
  var env = req.param('env', 'prod');
  // save start event for logging once we have an email to log it to
  var startEvent = "GET /email/" + env;

  api.getVerifiedEmail({env:env}, function(err, data) {
    if (err) {
      console.log("ERROR: getVerifiedEmail: " + err);
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    logEvent(startEvent, data.email, start);
    return dataWithEvents(res, data, start);
  });
});

app.get('/unverified_email/:env?', verifyEnv, function getUnverifiedEmail(req, res) {
  var start = Date.now();
  var env = req.param('env', 'prod');
  var startEvent = "GET /unverified_email/" + env;

  api.getUnverifiedEmail({env:env}, function(err, data) {
    if (err) {
      console.log("ERROR: getUnverifiedEmail: " + err);
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    logEvent(startEvent, data.email, start);
    return dataWithEvents(res, data, start);
  });
});

app.get('/cancel/:email/:password', function cancelAccount(req, res) {
  api.cancelAccount(req.param('email'), req.param('password'), function(err, data) {
    if (err) {
      console.log("ERROR: cancelAccount: " + err);
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    return res.end(JSON.stringify(data));
  });
});

function check_malformed_audience(audience, res) {
  if (! /^https?:\/\//.test(audience)) {
    res.setHeader('Content-Type', 'text/plain');
    res.writeHead(400);
    res.end("Audience '" + audience + "' must begin with protocol and be url encoded.\nFor example:\n\thttps%3A%2F%2F" + audience + "\n\n");
    return true;
  }
  return false;
}

function _getAssertion(email, password, audience, req, res, start) {
  start = start || Date.now();
  // utility function for assertion getters below

  api.getUserData(email, password, function(err, userData) {
    if (err) {
      console.log("ERROR: getUserData: " + err);
      res.writeHead(401);
      return res.end();
    }

    if (!userData) {
      console.log("getUserData: not found: " + email);
      res.writeHead(404);
      return res.end();
    }

    api.getAssertion(userData, audience, function(err, results) {
      if (err || !results) {
        console.log("ERROR: getAssertion: " + err);
        res.writeHead(500);
        return res.end();
      }
      res.contentType('json');
      logEvent("Done", email);
      return dataWithEvents(res, results, start);
    });
  });
};

/**
 * Get an assertion.  If email exists, password must be correct.  If
 * email does not exist, a new account will be created with email and
 * password first.
 */
app.get('/assertion/:audience/:email/:password/:env?', function getAssertion(req, res) {
  var start = Date.now();
  if (check_malformed_audience(req.param('audience'), res)) { return null; }

  var audience = req.param('audience');
  var email = req.param('email');
  var pass = req.param('password');
  var env = req.param('env', 'prod');
  logEvent("GET /assertion/<aud>/<email>/<password>", email);

  // check if account exists
  api.getUserData(email, pass, function(err, data) {
    // Invalid password or other error
    if (err) {
      res.writeHead(500);
      return res.end();
    }

    // Account exists and caller knows the right password.
    // Get assertion.
    if (data) {
      return _getAssertion(email, pass, audience, req, res, start);
    }

    // Email does not exist.  Create account first; then get assertion
    var params = {
      email: email,
      pass: pass,
      audience: audience,
      env: env
    };
    api.getVerifiedEmail(params, function(err, userData) {
      if (userData && !err) {
        return _getAssertion(email, pass, audience, req, res, start);
      }
      return res.writeHead(500);
      return res.end();
    });
  });

});

app.get('/email_with_assertion/:audience/:env?', verifyEnv, function getEmailAndAssertion(req, res) {
  var start = Date.now();
  if (check_malformed_audience(req.param('audience'), res)) { return null; }

  var env = req.param('env', 'prod');
  var startEvent = "GET /email_with_assertion/<aud>/" + env;

  api.getVerifiedEmail({env:env}, function(err, data) {
    if (err || !data) {
      console.log("ERROR: getVerifiedEmail: " + err);
      res.writeHead(500);
      return res.end();
    }
    logEvent(startEvent, data.email, start);
    return _getAssertion(data.email, data.pass, req.param('audience'), req, res, start);
  });
});

// ----------------------------------------------------------------------
// socket.io interface

api.on('error', function(err) {
  io.sockets.emit('message', {'type': 'status', 'data': err});
  console.log("ERROR: app: " + err);
});
api.on('message', function(message) {
  console.log("app: " + message);
  // XXX should not broadcast all api messages - only per-socket
  // by api call
  io.sockets.emit('message', {'type': 'status', 'data': message});
});

io.on('connection', function(socket) {
  socket.on('message', function(data) {
    if (data.method) {
      var serverEnv = data.env ? data.env : 'prod';
      if (allowedEnvs.indexOf(serverEnv) === -1) {
        socket.json.send({err: "Unsupported env: " + data.env});
      } else {
        switch(data.method) {
          case 'getVerifiedEmail':
            api.getVerifiedEmail({env:serverEnv}, function(err, user) {
              socket.json.send({err: err, type: "verifiedEmail", data: user});
            });
            break;
          case 'getUnverifiedEmail':
            api.getUnverifiedEmail({env:serverEnv}, function(err, user) {
              socket.json.send({err: err, type: "unverifiedEmail", data: user});
            });
            break;
          default:
            socket.json.send({err: "Unsupported method"});
            break;
        }
      }
    }
  });
});

if (!module.parent) {
  var port = parseInt(process.env['PORT'] || '3000', 10);
  app.listen(port, function(){
    console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
  });
}
