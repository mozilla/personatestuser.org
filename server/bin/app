#!/usr/bin/env node
/* -*- Mode: js2; js2-basic-offset: 2; indent-tabs-mode: nil; -*- */

/**
 * persona test user generator
 *
 * see README.md for documentation
 */

const express = require('express'),
      path = require('path'),
      socket_io = require('socket.io'),
      vconf = require('../lib/vconf'),
      logEvent = require("../lib/events").logEvent,
      fetchEvents = require('../lib/events').fetchEvents,
      API = require('../lib/api');

var api = new API();
var app = module.exports = express.createServer();

const allowedEnvs = ['custom', 'local', 'dev', 'stage', 'prod'];

// A regex to validate browserid and verifier urls.
// Urls can have domain names or ipv4 dot quad numbers
const validUrlRE = new RegExp('^https://([\\w\\d_-]+\\.)+([\\w\\d]+)(/[\\w\\d_-]+)*$');

var io = socket_io.listen(app);
io.set('log level', 1);

// Configuration

app.configure(function(){
  app.set('views', path.join(__dirname, '..', 'views'));
  app.set('view engine', 'jade');
  app.use(express.logger());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(path.join(__dirname, '..', '..', 'static')));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// Utility

function errorResponse(message, res, err) {
  if (err) {
    console.log("ERROR: " + message + ": " + err.toString());
  } else {
    console.log("ERROR: " + message);
    err = new Error(message);
  }

  // XXX make sure headers have not already been set
  res.write(JSON.stringify({
    message: message,
    error: err.message,
    stack: err.stack
  }));
  return res.end();
}

// middleware

/*
 * Ensure that the env is valid, and inject browserid and verifier
 * into req.query if necessary.
 */
function verifyEnv(req, res, next) {
  var serverEnv = req.param('env', 'prod');
  if (allowedEnvs.indexOf(serverEnv) === -1) {
    res.writeHead(400);
    return errorResponse("env must be one of: " + allowedEnvs.join(', '), res);
  } else {
    if (serverEnv !== 'custom') {
      req.query['browserid'] = vconf[serverEnv].browserid;
      req.query['verifier'] = vconf[serverEnv].verifier;
    } else {
      if (!req.query['browserid']) {
        return errorResponse("Missing browserid url in query", res);
      }
      if (!req.query['verifier']) {
        return errorResponse("Missing verifier url in query", res);
      }
    }

    // Must be https
    if (req.query['browserid'].slice(0,8) !== "https://") {
      req.query['browserid'] = "https://" + req.query['browserid'];
    }
    if (req.query['verifier'].slice(0,8) !== "https://") {
      req.query['verifier'] = "https://" + req.query['verifier'];
    }

    // Check those urls for sanity.
    if (! validUrlRE.test(req.query['browserid'])) {
      return errorResponse("BrowserID url invalid: " + req.query['browserid'], res);
    }
    if (! validUrlRE.test(req.query['verifier'])) {
      return errorResponse("Verifiery url invalid: " + req.query['verifier'], res);
    }

    if (! (req.query.browserid && req.query.verifier)) {
      return errorResponse("missing browserid or verifier url", res);
    }
    next();
  }
}

/*
 * set the response content-type to json
 */
function jsonOut(req, res, next) {
  console.log("setting content type");
  res.contentType('application/json');
  next();
}

// Routes

app.get('/', function(req, res) {
  res.render('index');
});

function dataWithEvents(res, data, start) {
  logEvent("Done", data.email);
  fetchEvents(data.email, start, function(err, stream) {
    data['events'] = {
      'start': start,
      'stream': stream
    };
    return res.end(JSON.stringify(data));
  });
}

app.get('/email/:env?', verifyEnv, jsonOut, function getVerifiedEmail(req, res) {
  var start = Date.now();
  var env = req.param('env', 'prod');

  // browserid and verifier injected into query by verifyEnv middleware
  var params = {
    env: env,
    browserid: req.query.browserid,
    verifier: req.query.verifier
  };

  // save start event for logging once we have an email to log it to
  var startEvent = "GET /email/" + env;

  api.getVerifiedEmail(params, function(err, data) {
    if (err) {
      return errorResponse("Cannot get email: " + String(err), res, err);
    }
    logEvent(startEvent, JSON.stringify(data, null, 2), start);
    return dataWithEvents(res, data, start);
  });
});

app.get('/unverified_email/:env?', verifyEnv, jsonOut, function getUnverifiedEmail(req, res) {
  var start = Date.now();
  var env = req.param('env', 'prod');

  // browserid and verifier injected into query by verifyEnv middleware
  var params = {
    env: env,
    browserid: req.query.browserid,
    verifier: req.query.verifier
  };

  var startEvent = "GET /unverified_email/" + env;

  api.getUnverifiedEmail(params, function(err, data) {
    if (err) {
      return errorResponse("Cannot get unverified email", res, err);
    }
    logEvent(startEvent, data.email, start);
    return dataWithEvents(res, data, start);
  });
});

app.get('/cancel/:email/:password', jsonOut, function cancelAccount(req, res) {
  api.cancelAccount(req.param('email'), req.param('password'), function(err, data) {
    if (err) {
      return errorResponse("Cannot cancel account", res, err);
    }
    return res.end(data);
  });
});

function checkMalformedAudience(audience, res) {
  if (! /^[a-z]+?:\/\//.test(audience)) {
    return new Error("Audience must begin with protocol and be url encoded, like so: https%3A%2F%2F" + audience);
  }
  return null;
}

function _getAssertion(email, password, audience, req, res, start) {
  start = start || Date.now();
  // utility function for assertion getters below

  api.getUserData(email, password, function(err, userData) {
    if (err) {
      return errorResponse("Cannot get user data", res, err);
    }

    if (!userData) {
      return errorResponse("personatestuser cannot find user: " + email, res);
    }

    api.getAssertion(userData, audience, function(err, results) {
      if (err || !results) {
        return errorResponse("Cannot get assertion", res, err);
      }
      logEvent("Done", email);
      return dataWithEvents(res, results, start);
    });
  });
};

/**
 * Get an assertion.  If email exists, password must be correct.  If
 * email does not exist, a new account will be created with email and
 * password first.
 */
app.get('/assertion/:audience/:email/:password/:env?', jsonOut, function getAssertion(req, res) {
  var start = Date.now();

  var err = checkMalformedAudience(req.param('audience', res));
  if (err) return errorResponse("Malformed audience parameter", res, err);

  var audience = req.param('audience');
  var email = req.param('email');
  var pass = req.param('password');
  var env = req.param('env', 'prod');

  logEvent("GET /assertion/<aud>/<email>/<password>", email);

  // check if account exists
  api.getUserData(email, pass, function(err, data) {
    // Invalid password or other error
    if (err) {
      return errorResponse("Cannot get assertion", res);
    }

    // Account exists and caller knows the right password.
    // Get assertion.
    if (data) {
      return _getAssertion(email, pass, audience, req, res, start);
    }

    // Email does not exist.  Create account first; then get assertion
    // browserid and verifier injected into query by verifyEnv middleware
    var params = {
      email: email,
      pass: pass,
      audience: audience,
      browserid: req.query.browserid,
      verifier: req.query.verifier,
      env: env
    };
    api.getVerifiedEmail(params, function(err, userData) {
      if (err) return errorResponse("Cannot get verified email for assertion", res, err);
      if (!userData) return errorResponse("Cannot get user data for assertion", res);
      return _getAssertion(email, pass, audience, req, res, start);
    });
  });

});

app.get('/email_with_assertion/:audience/:env?', verifyEnv, function getEmailAndAssertion(req, res) {
  var start = Date.now();

  var err = checkMalformedAudience(req.param('audience', res));
  if (err) return errorResponse("Malformed audience parameter", res, err);

  var env = req.param('env', 'prod');

  // browserid and verifier injected into query by verifyEnv middleware
  var params = {
    env: env,
    browserid: req.query.browserid,
    verifier: req.query.verifier
  };

  var startEvent = "GET /email_with_assertion/<aud>/" + env;

  api.getVerifiedEmail(params, function(err, data) {
    if (err) return errorResponse("Cannot get verified email for assertion", res, err);
    if (!data) return errorResponse("Cannot get user data for assertion", res);
    logEvent(startEvent, data.email, start);
    return _getAssertion(data.email, data.pass, req.param('audience'), req, res, start);
  });
});

// ----------------------------------------------------------------------
// socket.io interface

api.on('error', function(err) {
  io.sockets.emit('message', {'type': 'status', 'data': err});
  console.log("ERROR: app: " + err);
});
api.on('message', function(message) {
  console.log("app: " + message);
  // XXX should not broadcast all api messages - only per-socket
  // by api call
  io.sockets.emit('message', {'type': 'status', 'data': message});
});

io.on('connection', function(socket) {
  socket.on('message', function(data) {
    if (data.method) {
      var serverEnv = data.env ? data.env : 'prod';
      var config = {
        env: serverEnv,
        browserid: vconf[serverEnv].browserid,
        verifier: vconf[serverEnv].verifier
      };
      if (allowedEnvs.indexOf(serverEnv) === -1) {
        socket.json.send({err: "Unsupported env: " + data.env});
      } else {
        switch(data.method) {
          case 'getVerifiedEmail':
            api.getVerifiedEmail(config, function(err, user) {
              socket.json.send({err: err, type: "verifiedEmail", data: user});
            });
            break;
          case 'getUnverifiedEmail':
            api.getUnverifiedEmail(config, function(err, user) {
              socket.json.send({err: err, type: "unverifiedEmail", data: user});
            });
            break;
          default:
            socket.json.send({err: "Unsupported method"});
            break;
        }
      }
    }
  });
});

if (!module.parent) {
  var port = parseInt(process.env['PORT'] || '3042', 10);
  app.listen(port, function(){
   console.log("personatestuser listening on port %d in %s mode", app.address().port, app.settings.env);
  });
}
