#!/usr/bin/env node

const express = require('express'),
      path = require('path'),
      socket_io = require('socket.io'),
      API = require('../lib/api');

var api = new API();
var app = module.exports = express.createServer();

const allowedEnvs = ['prod','stage','dev'];

var io = socket_io.listen(app);
io.set('log level', 1);

// Configuration

app.configure(function(){
  app.set('views', path.join(__dirname, '..', 'views'));
  app.set('view engine', 'jade');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(path.join(__dirname, '..', '..', 'static')));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// Routes

app.get('/', function(req, res) {
  res.render('index');
});


app.get('/test_user/:env?', function getTestUser(req, res) {
  var serverEnv = req.param('env', 'prod');
  if (allowedEnvs.indexOf(serverEnv) === -1) {
    res.writeHead(400);
    return res.end("env must be one of " + allowedEnvs.join(', '));
  }
  
  api.getTestUser(serverEnv, function(err, user) {
    if (err) {
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    res.end(JSON.stringify(user));
  });
});

function getAssertion(params, req, res) {
  api.getAssertion(req.params, function(err, assertion) {
    if (err) {
      res.writeHead(500);
      return res.end();
    }

    res.contentType('json');
    res.end(JSON.stringify(assertion));
  });
}

app.get('/assertion/:email/:password/:audience', function getAssertion(req, res) {
  getAssertion(req.params, req, res);
});

app.post('/assertion', function postGetAssertion(req, res) {
  getAssertion(req.body, req, res);
});

// ----------------------------------------------------------------------
// socket.io interface

api.on('error', function(err) {
  console.log("ERROR: app: " + err);
});
api.on('message', function(message) {
  console.log("app: " + message);
  io.sockets.emit('message', {'status': message});
});

io.on('connection', function(socket) {
  socket.on('message', function(data) {
    if (data.method) {
      if (data.method === 'getTestUser') {
        var serverEnv = data.env ? data.env : 'prod';
        if (allowedEnvs.indexOf(serverEnv) === -1) {
          console.error("Unsupported server environment: " + serverEnv);
        } else {
          api.getTestUser(serverEnv, function(err, user) {
            socket.json.send({err: err, user: user});
          });
        }
      } else {
        console.error("Unsupported method: " + data.method);
      }
    }
  });
});

if (!module.parent) {
  var port = parseInt(process.env['PORT'] || '3000', 10);
  app.listen(port, function(){
    console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
  });
}

